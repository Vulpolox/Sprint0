using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;

using Myra;
using Myra.Graphics2D.UI;

namespace TestProject
{
    public class Game1 : Game
    {
        private GraphicsDeviceManager _graphics;
        private SpriteBatch _spriteBatch;
        private Desktop _desktop;

        public Game1()
        {
            _graphics = new GraphicsDeviceManager(this);
            Content.RootDirectory = "Content";
            IsMouseVisible = true;
        }

        protected override void Initialize()
        {
            // TODO: Add your initialization logic here

            base.Initialize();
        }

        protected override void LoadContent()
        {
            _spriteBatch = new SpriteBatch(GraphicsDevice);

            // ------------------------------------------------ //

            MyraEnvironment.Game = this;


            // GRID

            var grid = new Grid
            {
                RowSpacing = 8,
                ColumnSpacing = 8,
                ShowGridLines = true
            };

            // add rows and columns to the grid
            grid.ColumnsProportions.Add(new Proportion(ProportionType.Auto));
            grid.ColumnsProportions.Add(new Proportion(ProportionType.Auto));
            grid.ColumnsProportions.Add(new Proportion(ProportionType.Auto));
            grid.RowsProportions.Add(new Proportion(ProportionType.Auto));
            grid.RowsProportions.Add(new Proportion(ProportionType.Auto));
            grid.RowsProportions.Add(new Proportion(ProportionType.Auto));


            // LABEL

            var helloWorld = new Label
            {
                Id = "label",
                Text = "Hello, World!"
            };
            grid.Widgets.Add(helloWorld);


            // COMBOBOX

            var combo = new ComboBox();
            Grid.SetColumn(combo, 1); // the x position of the widget in the grid
            Grid.SetRow(combo, 0);    // the y position of the widget in the grid

            combo.Items.Add(new ListItem("Red", Color.Red));
            combo.Items.Add(new ListItem("Green", Color.Green));
            combo.Items.Add(new ListItem("Blue", Color.Blue));
            grid.Widgets.Add(combo);


            // BUTTON

            var button = new Button
            {
                Content = new Label
                {
                    Text = "BUTTON"
                }
            };
            Grid.SetColumn(button, 0);
            Grid.SetRow(button, 1);

            button.Click += (s, a) =>
            {
                var messageBox = Dialog.CreateMessageBox("Message", "Hi, COMPSCI 449");
                messageBox.ShowModal(_desktop);
            };

            grid.Widgets.Add(button);


            // RADIO BUTTON

            // panel to hold radio buttons
            var radioButtonPanel = new VerticalStackPanel(); 
            
            // initialize radio buttons
            var radioButton1 = new RadioButton
            {
                Text = "Radio Button 1"
            };

            var radioButton2 = new RadioButton
            {
                Text = "Radio Button 2"
            };

            // add radio buttons to VerticalStackPanel
            radioButtonPanel.Widgets.Add(radioButton1);
            radioButtonPanel.Widgets.Add(radioButton2);

            // add VerticalStackPanel to grid
            Grid.SetColumn(radioButtonPanel, 2);
            Grid.SetRow(radioButtonPanel, 0);
            grid.Widgets.Add(radioButtonPanel);


            // CHECK BOX

            // vertical panel to hold horizontal stack panels
            var checkBoxPanel = new VerticalStackPanel();

            // horizontal stack panels to hold check box-label pairs
            var labelPanel1 = new HorizontalStackPanel();
            var labelPanel2 = new HorizontalStackPanel();

            // initialize check boxes
            var checkButton1 = new CheckButton();
            var checkButton2 = new CheckButton();

            // initialize labels
            var checkLabel1 = new Label
            {
                Text = "Check Box #1 "
            };
            var checkLabel2 = new Label
            {
                Text = "Check Box #2 "
            };

            // put check box-label pairs inside each of the horizontal stack panels
            labelPanel1.Widgets.Add(checkLabel1);
            labelPanel1.Widgets.Add(checkButton1);
            labelPanel2.Widgets.Add(checkLabel2);
            labelPanel2.Widgets.Add(checkButton2);

            // put the horizontal stack panels in the vertical stack panel
            checkBoxPanel.Widgets.Add(labelPanel1);
            checkBoxPanel.Widgets.Add(labelPanel2);

            // put the vetical stack panel in the main grid
            Grid.SetColumn(checkBoxPanel, 2);
            Grid.SetRow(checkBoxPanel, 1);
            grid.Widgets.Add(checkBoxPanel);



            // SPIN BUTTON

            var spinButton = new SpinButton
            {
                Width = 100,
                Nullable = true
            };
            Grid.SetColumn(spinButton, 1);
            Grid.SetRow(spinButton, 1);

            grid.Widgets.Add(spinButton);


            // ADD TO DESKTOP

            _desktop = new Desktop();
            _desktop.Root = grid;
        }

        protected override void Update(GameTime gameTime)
        {
            if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed || Keyboard.GetState().IsKeyDown(Keys.Escape))
                Exit();

            // TODO: Add your update logic here

            base.Update(gameTime);
        }

        protected override void Draw(GameTime gameTime)
        {
            GraphicsDevice.Clear(Color.Black);

            // TODO: Add your drawing code here

            _desktop.Render();

            base.Draw(gameTime);
        }
    }
}
